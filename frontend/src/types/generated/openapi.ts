/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입
         * @description 새로운 사용자를 등록합니다.
         */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인
         * @description 이메일과 비밀번호로 로그인합니다.
         */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 토큰 갱신
         * @description 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다.
         */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description 사용자를 로그아웃 처리합니다.
         */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 프로필 조회
         * @description 현재 로그인된 사용자의 프로필 정보를 조회합니다.
         */
        get: operations["AuthController_getProfile"];
        /**
         * 프로필 수정
         * @description 현재 로그인된 사용자의 프로필 정보를 수정합니다.
         */
        put: operations["AuthController_updateProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 세션 상태 조회(항상 200) */
        get: operations["AuthController_session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 구글 로그인
         * @description 구글 OAuth 로그인을 시작합니다.
         */
        get: operations["AuthController_handleGoogleLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 구글 로그인 콜백
         * @description 구글 OAuth 콜백을 처리하고 JWT 토큰을 발급합니다.
         */
        get: operations["AuthController_handleGoogleCallback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/csrf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** CSRF 토큰 발급 */
        get: operations["AuthController_issueCsrf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findAll"];
        put?: never;
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findOne"];
        put?: never;
        post?: never;
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/api/users/{id}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getMyProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getMyStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getMyPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getMyComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/bookmarks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getMyBookmarks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 목록 조회
         * @description 게시글 목록을 페이징과 필터링하여 조회합니다.
         */
        get: operations["PostsController_findAll"];
        put?: never;
        /**
         * 게시글 작성
         * @description 새로운 게시글을 작성합니다.
         */
        post: operations["PostsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 상세 조회
         * @description 특정 게시글의 상세 정보를 조회합니다.
         */
        get: operations["PostsController_findOne"];
        put?: never;
        post?: never;
        delete: operations["PostsController_remove"];
        options?: never;
        head?: never;
        patch: operations["PostsController_update"];
        trace?: never;
    };
    "/api/posts/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostsController_toggleLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{id}/bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostsController_toggleBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PostsController_getUserPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/search/{keyword}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PostsController_searchPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 목록 조회
         * @description 모든 태그 목록을 조회합니다.
         */
        get: operations["TagsController_findAll"];
        put?: never;
        /**
         * 태그 생성
         * @description 새로운 태그를 생성합니다.
         */
        post: operations["TagsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 검색
         * @description 태그명을 검색합니다.
         */
        get: operations["TagsController_searchTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/ranking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 랭킹 조회
         * @description 사용 빈도순으로 태그 랭킹을 조회합니다.
         */
        get: operations["TagsController_getTagRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 상세 조회
         * @description 특정 태그의 상세 정보를 조회합니다.
         */
        get: operations["TagsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/{id}/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그별 게시물 조회
         * @description 특정 태그가 달린 게시물들을 조회합니다.
         */
        get: operations["TagsController_getPostsByTag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시물에 태그 추가
         * @description 게시물에 태그들을 추가합니다.
         */
        post: operations["TagsController_addTagsToPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/stats/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 통계 조회
         * @description 태그 관련 전체 통계를 조회합니다.
         */
        get: operations["TagsController_getTagStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommentsController_findAll"];
        put?: never;
        post: operations["CommentsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommentsController_findOne"];
        put?: never;
        post?: never;
        delete: operations["CommentsController_remove"];
        options?: never;
        head?: never;
        patch: operations["CommentsController_update"];
        trace?: never;
    };
    "/api/comments/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CommentsController_toggleLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/post/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommentsController_getPostComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommentsController_getUserComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{id}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommentsController_getCommentReplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/database": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DatabaseController_getTables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/database/structure/{tableName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DatabaseController_getTableStructure"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/database/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DatabaseController_getPostsTableStructure"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterDto: {
            /**
             * @description 사용자 이메일 주소
             * @example user@example.com
             */
            email: string;
            /**
             * @description 비밀번호 (대소문자, 숫자, 특수문자 포함)
             * @example Password123!
             */
            password: string;
            /**
             * @description 사용자 닉네임
             * @example 탈모탈출러
             */
            nickname: string;
            /**
             * @description 사용자 자기소개
             * @example 탈모로 고민하다가 치료를 시작했습니다.
             */
            bio?: string;
        };
        TokenDto: {
            /**
             * @description JWT 액세스 토큰
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            access_token: string;
            /**
             * @description JWT 리프레시 토큰
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            refresh_token: string;
            /** @description 사용자 정보 */
            user: {
                /**
                 * @description 사용자 ID
                 * @example 123e4567-e89b-12d3-a456-426614174000
                 */
                user_id?: string;
                /**
                 * @description 사용자 이메일
                 * @example user@example.com
                 */
                email?: string;
                /**
                 * @description 사용자 닉네임
                 * @example 탈모탈출러
                 */
                nickname?: string;
                /**
                 * @description 사용자 역할
                 * @example user
                 * @enum {string}
                 */
                role?: "user" | "admin" | "expert";
            };
        };
        LoginDto: {
            /**
             * @description 사용자 이메일 주소
             * @example user@example.com
             */
            email: string;
            /**
             * @description 사용자 비밀번호
             * @example Password123!
             */
            password: string;
        };
        User: {
            /**
             * @description 사용자 고유 ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            user_id: string;
            /**
             * @description 사용자 이메일 주소
             * @example user@example.com
             */
            email: string;
            /**
             * @description 사용자 비밀번호 (해시된 값)
             * @example $2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewfBpKmkp
             */
            password: string;
            /**
             * @description 사용자 실제 이름
             * @example 홍길동
             */
            name?: string;
            /**
             * @description 사용자 닉네임
             * @example 탈모탈출러
             */
            nickname: string;
            /**
             * @description 사용자 역할
             * @example user
             * @enum {string}
             */
            role: "user" | "admin" | "expert";
            /**
             * @description 사용자 아바타 이미지 URL
             * @example https://example.com/avatar.jpg
             */
            avatar_url?: string;
            /**
             * @description 사용자 자기소개
             * @example 탈모로 고민하다가 치료를 시작했습니다.
             */
            bio?: string;
            /**
             * @description 계정 활성화 상태
             * @example true
             */
            is_active: boolean;
            /**
             * @description 구글 고유 ID
             * @example 1234567890
             */
            google_id?: string;
            /**
             * @description 로그인 제공자
             * @example email
             * @enum {string}
             */
            provider: "email" | "google";
            /**
             * @description 이메일 인증 상태
             * @example false
             */
            email_verified: boolean;
            /**
             * Format: date-time
             * @description 계정 생성일시
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description 계정 수정일시
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        CreateUserDto: Record<string, never>;
        UpdateUserDto: Record<string, never>;
        Category: Record<string, never>;
        Comment: Record<string, never>;
        Bookmark: Record<string, never>;
        Report: Record<string, never>;
        Like: Record<string, never>;
        Tag: Record<string, never>;
        PostTag: Record<string, never>;
        Post: {
            /**
             * @description 게시글 고유 ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            post_id: string;
            /**
             * @description 작성자 사용자 ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            user_id: string;
            /**
             * @description 게시글 제목
             * @example 미녹시딜 3개월차 변화 공유합니다
             */
            title: string;
            /**
             * @description 게시글 본문
             * @example 미녹시딜 사용 후 3개월간의 변화를 공유합니다.
             */
            content: string;
            /**
             * @description 이미지 URL 목록
             * @example [
             *       "https://example.com/image1.jpg",
             *       "https://example.com/image2.jpg"
             *     ]
             */
            image_urls?: string[];
            /**
             * @description 카테고리 ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            category_id?: string;
            /**
             * @description 게시글 상태
             * @example published
             * @enum {string}
             */
            status: "draft" | "published" | "archived" | "deleted";
            /**
             * @description 게시글 유형
             * @example general
             * @enum {string}
             */
            type: "general" | "anonymous" | "hospital" | "product" | "expert_qna";
            /**
             * @description 좋아요 수
             * @example 15
             */
            likes_count: number;
            /**
             * @description 싫어요 수
             * @example 2
             */
            dislikes: number;
            /**
             * @description 조회수
             * @example 150
             */
            view_count: number;
            /**
             * @description 익명 여부
             * @example false
             */
            is_anonymous: boolean;
            /**
             * @description 익명 닉네임
             * @example 익명사용자
             */
            anonymous_nickname?: string;
            /**
             * Format: date-time
             * @description 생성일시
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description 수정일시
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
            /** @description 작성자 정보 */
            user?: components["schemas"]["User"];
            /** @description 카테고리 정보 */
            category?: components["schemas"]["Category"];
            /** @description 댓글 목록 */
            comments?: components["schemas"]["Comment"][];
            /** @description 북마크 목록 */
            bookmarks?: components["schemas"]["Bookmark"][];
            /** @description 신고 목록 */
            reports?: components["schemas"]["Report"][];
            /** @description 좋아요/싫어요 목록 */
            likes?: components["schemas"]["Like"][];
            /** @description 태그 목록 */
            tags?: components["schemas"]["Tag"][];
            /** @description 게시글-태그 관계 목록 */
            post_tags?: components["schemas"]["PostTag"][];
        };
        PostViewDto: {
            /**
             * @description 게시글 고유 ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description 카테고리 ID(UUID v4)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            boardId?: string;
            /**
             * @description 제목
             * @example 미녹시딜 3개월차 변화 공유합니다
             */
            title: string;
            /**
             * @description 본문
             * @example 미녹시딜 사용 후 3개월간의 변화를 공유합니다.
             */
            body: string;
            /**
             * @description 작성자 표시명
             * @example 탈모탈출러
             */
            author: string;
            /**
             * @description 생성일시(ISO)
             * @example 2024-01-01T00:00:00.000Z
             */
            createdAt: string;
            /**
             * @description 태그 목록
             * @example [
             *       "#탈모케어",
             *       "#샴푸"
             *     ]
             */
            tags?: string[];
            /**
             * @description 좋아요 수
             * @example 0
             */
            likes: number;
            /**
             * @description 조회수
             * @example 0
             */
            views: number;
            /**
             * @description 싫어요 수
             * @example 0
             */
            dislikes?: number;
        };
        PostSingleResponseDto: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["PostViewDto"];
            /** @example 게시글이 성공적으로 생성되었습니다. */
            message?: string;
        };
        PaginationDto: {
            /** @example 1 */
            currentPage: number;
            /** @example 10 */
            totalPages: number;
            /** @example 100 */
            totalItems: number;
            /** @example 10 */
            itemsPerPage: number;
        };
        PostListResponseDto: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["PostViewDto"][];
            pagination: components["schemas"]["PaginationDto"];
        };
        CreatePostDto: {
            /**
             * @description 게시글 제목
             * @example 병원 추천 부탁드립니다
             */
            title: string;
            /**
             * @description 게시글 본문
             * @example OO병원 가보신 분 계신가요?
             */
            content: string;
            /** @description 이미지 URL 목록 */
            image_urls?: string[];
            /** @description 카테고리 ID(UUID v4) */
            category_id?: string;
            /**
             * @description 게시글 유형
             * @enum {string}
             */
            type?: "general" | "anonymous" | "hospital" | "product" | "expert_qna";
            /**
             * @description 익명 여부
             * @default false
             */
            is_anonymous: boolean;
            /** @description 익명 닉네임(익명일 때만) */
            anonymous_nickname?: string;
            /** @description 태그 목록(자동으로 # 접두사 부여) */
            tags?: string[];
        };
        UpdatePostDto: {
            /** @description 수정할 게시글 제목 */
            title?: string;
            /** @description 수정할 게시글 본문 */
            content?: string;
            /** @description 수정할 카테고리 ID(UUID v4) */
            category_id?: string;
            /** @description 수정할 태그 목록 */
            tags?: string[];
        };
        CreateTagDto: Record<string, never>;
        AddTagsToPostDto: Record<string, never>;
        CreateCommentDto: Record<string, never>;
        UpdateCommentDto: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description 회원가입 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
            /** @description 잘못된 입력 데이터 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이미 존재하는 이메일 또는 닉네임 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description 로그인 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
            /** @description 이메일 또는 비밀번호가 올바르지 않음 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 토큰 갱신 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
            /** @description 유효하지 않은 토큰 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 로그아웃 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 유효하지 않은 토큰 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 프로필 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description 유효하지 않은 토큰 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 프로필 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description 잘못된 입력 데이터 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 유효하지 않은 토큰 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이미 사용 중인 닉네임 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_session: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_handleGoogleLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_handleGoogleCallback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_issueCsrf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUserStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyPosts: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyComments: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyBookmarks: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUserPosts: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUserComments: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_findAll: {
        parameters: {
            query?: {
                /** @description 페이지 번호 */
                page?: string;
                /** @description 페이지당 항목 수 */
                limit?: string;
                /** @description 정렬 기준 */
                sortBy?: string;
                /** @description 정렬 순서 */
                sortOrder?: string;
                /** @description 태그 필터링 (쉼표로 구분) */
                tags?: string;
                /** @description 검색어 */
                search?: unknown;
                /** @description 게시글 상태 */
                status?: unknown;
                /** @description 게시글 타입 */
                type?: unknown;
                /** @description 카테고리 ID */
                category_id?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostListResponseDto"];
                };
            };
        };
    };
    PostsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 게시글 생성 입력 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostDto"];
            };
        };
        responses: {
            /** @description 게시글 작성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostSingleResponseDto"];
                };
            };
            /** @description 잘못된 입력 데이터 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 카테고리를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 게시글 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시글 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostSingleResponseDto"];
                };
            };
            /** @description 게시글을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description 게시글 수정 입력 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_toggleLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_toggleBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getUserPosts: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_searchPosts: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path: {
                keyword: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_findAll: {
        parameters: {
            query?: {
                /** @description 조회할 태그 수 */
                limit?: string;
                /** @description 건너뛸 태그 수 */
                offset?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 태그 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTagDto"];
            };
        };
        responses: {
            /** @description 태그 생성 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 잘못된 입력 데이터 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 이미 존재하는 태그 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_searchTags: {
        parameters: {
            query: {
                /** @description 검색어 */
                q: string;
                /** @description 결과 수 제한 */
                limit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 태그 검색 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_getTagRanking: {
        parameters: {
            query?: {
                /** @description 랭킹 수 제한 */
                limit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 태그 랭킹 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 태그 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 태그 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 태그를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_getPostsByTag: {
        parameters: {
            query?: {
                /** @description 페이지 번호 */
                page?: string;
                /** @description 페이지당 항목 수 */
                limit?: string;
            };
            header?: never;
            path: {
                /** @description 태그 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 게시물 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_addTagsToPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 게시물 ID */
                postId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddTagsToPostDto"];
            };
        };
        responses: {
            /** @description 태그 추가 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 게시물 또는 태그를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_getTagStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 통계 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_findAll: {
        parameters: {
            query: {
                page: string;
                limit: string;
                sortBy: string;
                sortOrder: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCommentDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_toggleLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_getPostComments: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path: {
                postId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_getUserComments: {
        parameters: {
            query: {
                page: string;
                limit: string;
            };
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentsController_getCommentReplies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DatabaseController_getTables: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DatabaseController_getTableStructure: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tableName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DatabaseController_getPostsTableStructure: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
